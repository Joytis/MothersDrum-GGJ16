<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>torch2_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SCALE = 0.15;

// 0 means on.
// 1 means off.
sprindx = 1;

calculatescale(global.OX, global.OY, global.HOZ, self, global.tScale);

speed = global.PSpeed;
direction = 270;

drumTrigger = 10;
Hit = false;
right = false;
left = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>calculatescale(global.OX, global.OY, global.HOZ, self, global.tScale);

if(x &gt; room_width + 300 || y &gt; room_height + 300)
{
    if(sprindx == 1)
    {
        global.life_state_sub = true;
    }
    instance_destroy();
}

if (keyboard_check_pressed(ord("Z")))
{
        left = true;
        Hit = true;
}

if (keyboard_check_pressed(ord("X")))
{
        right = true;
        Hit = true;
}

if(Hit){
    drumTrigger--;
}

if(drumTrigger == 0){

//SPAM CHECKING?
if(right &amp;&amp; !place_meeting(x,y,TBB2_obj))
{
    global.life_state_sub = true;
    right = false;
}   

if(left &amp;&amp; !place_meeting(x,y,TorchBeatBox_obj))
{
    global.life_state_sub = true;
    left = false;
} 

if(place_meeting(x,y,TorchBeatBox_obj)){

    //if(!audio_is_playing(snd_light_torch)){
    //    audio_play_sound(snd_light_torch, 12, false);
    //}
    if(left &amp;&amp; sprindx != 0 &amp;&amp; SCALE &lt; 0)
    {
        sprindx = 0;
    }
    global.life_state_null = true;
    
}
if(place_meeting(x,y,TBB2_obj)){
    //if(!audio_is_playing(snd_light_torch)){
    //    audio_play_sound(snd_light_torch, 12, false);
    //}
    if(right &amp;&amp; SCALE &gt; 0)
    {
        sprindx = 0;
    }
    global.life_state_null = true;
}

  

    snd = choose(snd_drum_2, snd_drum_3, snd_drum_4, snd_drum_5, snd_drum_6);
    audio_sound_gain(snd, 0.15, 0);
    audio_play_sound(snd, 3, false);
    Hit = !Hit;
    right = !right;
    left = !left;
    drumTrigger = 10;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord("Z")))
{
        if(!audio_is_playing(snd_light_torch)){
        audio_play_sound(snd_light_torch, 12, false);
        Hit = true;
    }
    if(sprindx == 0)
    {
        
    }
    else
    {
        if(SCALE &lt; 0)
        {
            sprindx = 0;
        }
    }
}

if(keyboard_check_pressed(ord("X")))
{
    
    if(SCALE &gt; 0)
    {
        if(!audio_is_playing(snd_light_torch)){
            audio_play_sound(snd_light_torch, 12, false);
            Hit = true;
        }
        sprindx = 0;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OVERLOADED DRAW EVENT
draw_sprite_ext(torch2_spr, sprindx, x, y, image_xscale, image_yscale, 0, c_white, 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
